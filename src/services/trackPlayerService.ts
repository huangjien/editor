import TrackPlayer, { Capability, Event } from 'react-native-track-player';

export const setupPlayer = async () => {
  try {
    await TrackPlayer.setupPlayer();
    await TrackPlayer.updateOptions({
      stopWithApp: true,
      capabilities: [
        Capability.Play,
        Capability.Pause,
        Capability.SkipToNext,
        Capability.SkipToPrevious,
        Capability.Stop,
      ],
      compactCapabilities: [
        Capability.Play,
        Capability.Pause,
        Capability.SkipToNext,
        Capability.SkipToPrevious,
      ],
    });
  } catch (error) {
    console.error('Error setting up TrackPlayer:', error);
  }
};

export const playbackService = async function () {
  TrackPlayer.addEventListener(Event.RemotePlay, () => TrackPlayer.play());
  TrackPlayer.addEventListener(Event.RemotePause, () => TrackPlayer.pause());
  TrackPlayer.addEventListener(Event.RemoteNext, () =>
    TrackPlayer.skipToNext(),
  );
  TrackPlayer.addEventListener(Event.RemotePrevious, () =>
    TrackPlayer.skipToPrevious(),
  );
  TrackPlayer.addEventListener(Event.RemoteStop, () => TrackPlayer.destroy());

  // Add more event listeners as needed for background playback, audio focus, etc.
};

export const addChapterToQueue = async (
  chapterId: string,
  chapterTitle: string,
  _chapterContent: string,
) => {
  await TrackPlayer.add({
    id: chapterId,
    url: 'file://' + chapterId, // Placeholder, actual audio will be generated by TTS
    title: chapterTitle,
    artist: 'Modern Fleet App',
    // You can add more metadata here if needed
  });
};

export const playChapter = async (
  chapterId: string,
  chapterTitle: string,
  chapterContent: string,
) => {
  await TrackPlayer.reset();
  await addChapterToQueue(chapterId, chapterTitle, chapterContent);
  await TrackPlayer.play();
};

export const togglePlayback = async (playbackState: any) => {
  const currentTrack = await TrackPlayer.getCurrentTrack();
  if (currentTrack != null) {
    if (playbackState === 'playing' || playbackState === 'buffering') {
      await TrackPlayer.pause();
    } else {
      await TrackPlayer.play();
    }
  }
};
